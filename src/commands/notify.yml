description: Notify a Slack channel with a custom message

parameters:
  channel:
    description: >
      Channel, private group, or IM channel to send message to. Can be an encoded ID,
      or a name.
    type: string

  message:
    description: Enter custom message.
    type: string
    default: Your job on CircleCI has completed.

  color:
    description: Hex color value for notification attachment color.
    type: string
    default: "#333333"

  mentions:
    description: A comma separated list of user IDs. No spaces.
    type: string
    default: ""

  author_name:
    description: Optional author name
    type: string
    default: ""

  author_link:
    description: Optional author link
    type: string
    default: ""

  title:
    description: Optional title
    type: string
    default: ""

  title_link:
    description: Optional title link
    type: string
    default: ""

  footer:
    description: Optional footer
    type: string
    default: ""

  ts:
    description: Optional timestamp
    type: string
    default: ""

  include_project_field:
    description: Whether or not to include the Project field in the message
    type: boolean
    default: true

  include_job_number_field:
    description: Whether or not to include the Job Number field in the message
    type: boolean
    default: true

  include_visit_job_action:
    description: Whether or not to include the Visit Job action in the message
    type: boolean
    default: true

  lighthouse_button_links:
    description: A string (json formatted) with the test names and results links
    type: string
    default: ""


steps:
  - run:
      name: Provide error if non-bash shell
      command: |
        if [ -z "$BASH" ]; then
          echo Bash not installed.
          exit 1
        fi

  - run:
      name: Slack Notification
      shell: /bin/bash
      command: |
        # set up potential lighthouse test results
        curl_arg_1="            -X POST
                    -H 'Content-Type: application/x-www-form-urlencoded'
                    -H 'Cache-Control: no-cache'
                    -d \"token=\${SLACK_OAUTH_TOKEN}\"
                    -d 'as_user=true'
                    <<# parameters.channel >>
                    -d \"channel=<< parameters.channel >>\"
                    <</ parameters.channel >>
                    -d \"attachments=[ \\
                        { \\
                          \\\"fallback\\\": \\\"<< parameters.message >> - \$CIRCLE_BUILD_URL\\\", \\
                          \\\"text\\\": \\\"<< parameters.message >> \$SLACK_MENTIONS\\\", \\
                          \\\"author_name\\\": \\\"<< parameters.author_name >>\\\", \\
                          \\\"author_link\\\": \\\"<< parameters.author_link >>\\\", \\
                          \\\"title\\\": \\\"<< parameters.title >>\\\", \\
                          \\\"title_link\\\": \\\"<< parameters.title_link >>\\\", \\
                          \\\"footer\\\": \\\"<< parameters.footer >>\\\", \\
                          \\\"ts\\\": \\\"<< parameters.ts >>\\\", \\
                          \\\"fields\\\": [ \\
                            <<# parameters.include_project_field >>
                            { \\
                              \\\"title\\\": \\\"Project\\\", \\
                              \\\"value\\\": \\\"\$CIRCLE_PROJECT_REPONAME\\\", \\
                              \\\"short\\\": true \\
                            }, \\
                            <</ parameters.include_project_field >>
                            <<# parameters.include_job_number_field >>
                            { \\
                              \\\"title\\\": \\\"Job Number\\\", \\
                              \\\"value\\\": \\\"\$CIRCLE_BUILD_NUM\\\", \\
                              \\\"short\\\": true \\
                            } \\
                            <</ parameters.include_job_number_field >>
                          ], \\
                          \\\"actions\\\": [ \\
                            <<# parameters.include_visit_job_action >>
                            { \\
                              \\\"type\\\": \\\"button\\\", \\
                              \\\"text\\\": \\\"Visit Job\\\", \\
                              \\\"url\\\": \\\"\$CIRCLE_BUILD_URL\\\" \\
                            }, \\
                            <</ parameters.include_visit_job_action >>
                            <</ parameters.dashboard_link >>
                            { \\
                              \\\"type\\\": \\\"button\\\", \\
                              \\\"text\\\": \\\"Dashboard\\\", \\
                              \\\"url\\\": \\\"<< parameters.dashboard_link >>\\\" \\
                            }, \\
                            <</ parameters.dashboard_link >>
                            <<# parameters.lighthouse_button_links >>
                            "
        for row in $(echo "<< parameters.lighthouse_button_links >>" | jq -c '.[]'); do
            _jq() {
             echo ${row} | jq -r ${1}
            }
        	curl_arg_2="$curlArg2{ \\
                             \\\"type\\\": \\\"button\\\", \\
                             \\\"text\\\": \\\"$(_jq '.name')\\\", \\
                             \\\"url\\\": \\\"$(_jq '.url')\\\" \\
                            }, \\
                            "
        done
        curl_arg_3="<</ parameters.lighthouse_button_links >>
                          ], \\
                          \\\"color\\\": \\\"<< parameters.color >>\\\" \\
                        } \\
                      ]\""
        curl_args=$curl_arg_1$curl_arg_2$curl_arg_3
        # Provide error if no token is set and error. Otherwise continue
        if [[ -z "$SLACK_OAUTH_TOKEN" ]]; then
          echo "NO SLACK_OAUTH_TOKEN SET"
          echo "Please set the SLACK_OAUTH_TOKEN environment variable"
          exit 1
        else
          # Webhook properly set.
          echo Notifying Slack Channel
          #Create Members string
          if [ -n "<< parameters.mentions >>" ]; then
            IFS="," read -ra SLACK_MEMBERS \<<< "<< parameters.mentions >>"
            for i in "${SLACK_MEMBERS[@]}"; do
              if [ $(echo ${i} | head -c 1) == "S" ]; then
                SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
              elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
              else
                SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
              fi
            done
          fi
          CURL_ARGS=("$curl_args")
          curl "${CURL_ARGS[@]}" "https://slack.com/api/chat.postMessage"
        fi
