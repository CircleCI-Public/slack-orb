version: 2.1

x-data:
  go-version: &go-version "1.21.5"

orbs:
  orb-tools: circleci/orb-tools@12.0
  go: circleci/go@1.9
  slack: {}

filters: &filters
  tags:
    only: /.*/

release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

commands:
  install-task:
    steps:
      - run:
          name: "Install go-task"
          command: sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d
  go-sync:
    steps:
      - run:
          name: go sync
          command: ./bin/task sync

jobs:
  lint:
    executor:
      name: go/default
      tag: *go-version
    steps:
      - checkout
      - install-task
      - go-sync
      - run:
          name: "Install golang devtools"
          command: ./bin/task install-devtools
      - run:
          name: "Lint golang source"
          command: ./bin/task lint
  tidy:
    executor:
      name: go/default
      tag: *go-version
    steps:
      - checkout
      - install-task
      - go-sync
      - run:
          name: "Run tidy and verify no diffs result"
          command: ./bin/task tidy && git diff --exit-code
  unit-tests:
    parameters:
      runner:
        type: executor
        default: cimg
    executor: << parameters.runner >>
    steps:
      - checkout
      - run:
          name: Maybe Install Curl on Alpine
          command: apk add curl || exit 0
      - install-task
      - run:
          name: go sync
          command: ./bin/task sync
      - run:
          name: go test
          command: ./bin/task test
  integration-test-templates:
    parameters:
      runner:
        type: executor
        default: cimg
    executor: << parameters.runner >>
    steps:
      - checkout
      - run:
          name: Build Latest
          command: |
            detect_os() {
              detected_platform="$(uname -s | tr '[:upper:]' '[:lower:]')"
              case "$detected_platform" in
              linux*) PLATFORM=Linux ;;
              darwin*) PLATFORM=Darwin ;;
              msys* | cygwin*) PLATFORM=Windows ;;
              *) return 1 ;;
              esac
            }

            detect_arch() {
              detected_arch="$(uname -m)"
              case "$detected_arch" in
              x86_64 | amd64) ARCH=x86_64 ;;
              i386 | i486 | i586 | i686) ARCH=i386 ;;
              arm64 | aarch64) ARCH=arm64 ;;
              arm*) ARCH=arm ;;
              *) return 1 ;;
              esac
            }

            detect_os
            detect_arch

            set -x
            go build -o ./.circleci/orbs/circleci/slack/$PLATFORM/$ARCH/slack-orb-go ./packages/cli/main.go
            set +x
            echo "export SLACK_BIN_CHECKSUM=$(sha256sum .circleci/orbs/circleci/slack/$PLATFORM/$ARCH/slack-orb-go | cut -d ' ' -f 1)" >> $BASH_ENV
          when: always
      - slack/notify:
          debug: true
          ignore_errors: false
          step_name: "Validate Checksum"
          template: basic_success_1
          event: always
          sha256: "$SLACK_BIN_CHECKSUM"
      - slack/notify:
          debug: true
          ignore_errors: false
          step_name: "Custom template with group mention"
          event: always
          template_inline: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Current Job: $CIRCLE_JOB"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "This test will @ a normal user, a user ID, and normal group name: <@U8C9ETTUG>, @orbs, @gabriel"
                  }
                }
              ]
            }
      - run:
          name: Verify SLACK_JOB_STATUS is written
          command: |
            grep "pass" /tmp/SLACK_JOB_STATUS
          when: always
      - slack/notify:
          debug: true
          ignore_errors: false
          step_name: "Fail template with mentions"
          template: basic_fail_1
          mentions: "@orbs"
          event: always
      - slack/notify:
          debug: true
          ignore_errors: false
          step_name: "Success template with mentions"
          template: basic_success_1
          event: always
      - slack/notify:
          step_name: "Success template minimal config"
          template: basic_success_1
          event: always
      - slack/notify:
          debug: true
          step_name: "Success tagged template"
          template: success_tagged_deploy_1
          event: always
      - slack/notify:
          debug: true
          ignore_errors: false
          step_name: "Custom template with env var in the message"
          event: always
          template_inline: >
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Current Job: $CIRCLE_JOB"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Sample link using environment variable in markdown <${CIRCLE_BUILD_URL}|LINK >"
                  }
                }
              ]
            }
      - run:
          name: Dynamically populate the mention and export the template as an environment variable
          command: |
            echo 'export COMMIT_MESSAGE="This text comes from an environment variable"' >> $BASH_ENV
            echo 'export SLACK_STR_MENTIONS="$COMMIT_MESSAGE"' >> $BASH_ENV
          when: always
      - slack/notify:
          debug: true
          ignore_errors: false
          step_name: "Dynamic template with environment variable"
          event: always
          template_path: packages/cli/templates/basic_success_1.json
      - slack/notify:
          debug: true
          ignore_errors: false
          step_name: "Notify without template parameter"
      # Should run for every branch but master
      - slack/notify:
          debug: true
          ignore_errors: false
          step_name: "Invert match set to true on 'master' branch pattern"
          branch_pattern: "master"
          invert_match: true
          event: always
      - run:
          name: Export variable with a multiline string
          command: |
            echo 'export MULTILINE_STRING="Line 1.\nLine 2.\nLine 3."' >> "$BASH_ENV"
          when: always
      - slack/notify:
          debug: true
          ignore_errors: false
          step_name: "Notify with multiline string"
          event: always
          template_inline: >
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Current Job: $CIRCLE_JOB"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "This message should show over multiple lines:\n $MULTILINE_STRING"
                  }
                }
              ]
            }
      - run:
          name: Export variable with double quotes
          command: |
            echo 'export DOUBLE_QUOTES_STRING="Hello There! My name is \"Potato\""' >> "$BASH_ENV"
          when: always
      - slack/notify:
          debug: true
          ignore_errors: false
          step_name: "Notify with double-quoted string"
          event: always
          template_inline: >
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Current Job: $CIRCLE_JOB"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "This message should show a string between double quotes: $DOUBLE_QUOTES_STRING"
                  }
                }
              ]
            }
      - run:
          name: Export variable with backslashes
          command: |
            echo 'export BACKSLASHES_STRING="This is how a \ looks like"' >> "$BASH_ENV"
          when: always
      - slack/notify:
          debug: true
          ignore_errors: false
          step_name: "Notify with backslashes string"
          event: always
          template_inline: >
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Current Job: $CIRCLE_JOB"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "This message should show a backslash: $BACKSLASHES_STRING"
                  }
                }
              ]
            }

  build-release:
    executor:
      name: go/default
      tag: *go-version
    steps:
      - go/install-goreleaser
      - checkout
      - go/goreleaser-release:
          publish-release: true
          validate-yaml: true
          project-path: "$HOME/project/packages/cli"
          github-token: GHI_TOKEN
  pre-deploy-validation:
    executor: cimg
    steps:
      - checkout
      - run:
          name: Validate Binary Version Change
          command: |
            if [[ "$CIRCLE_TAG" =~ "dev" ]]; then
              echo "Dev tag detected, skipping validation."
              exit 0
            fi
            escaped_expected_val="\<\< parameters.step_name \>\>"
            expected_val=$(echo "$escaped_expected_val" | sed -e's/\//\\\//g')
            CONFIGURED_BIN_VERSION=$(cat packages/orb/commands/notify.yml | yq '.steps[] | select(.run.name =="$expected_val") | .run.environment.SLACK_STR_BIN_VERSION')
            if [[ "$CONFIGURED_BIN_VERSION" != "$CIRCLE_TAG" ]]; then
              echo "The current release tag does not match the pinned version in the orb source."
              echo "Please delete this tag, update the pinned binary version in the orb source, and re-trigger a new release."
              exit 1
            fi

workflows:
  test-deploy:
    jobs:
      - lint:
          filters: *filters
      - tidy:
          filters: *filters
      - unit-tests:
          filters: *filters
          matrix:
            parameters:
              runner: [cimg, alpine]
      - integration-test-templates:
          context: SLACK_NOTIFICATIONS_TEST
          filters: *filters
          requires: [unit-tests]
          matrix:
            parameters:
              runner: [cimg, windows, alpine]
      - pre-deploy-validation:
          filters: *release-filters
      - orb-tools/pack:
          source_dir: packages/orb
          filters: *release-filters
      - build-release:
          requires: [integration-test-templates, pre-deploy-validation, orb-tools/pack]
          context: orb-publisher
          filters: *release-filters
      - orb-tools/publish:
          orb_name: circleci/slack
          vcs_type: << pipeline.project.type >>
          pub_type: dev
          requires: [build-release]
          context: orb-publisher
          filters: *release-filters
executors:
  cimg:
    docker:
      - image: cimg/go:1.21.5
  mac:
    macos:
      xcode: 15.0.0
  alpine:
    # This image contains both CURL and JQ
    docker:
      - image: golang:alpine
  windows:
    machine:
      image: windows-server-2022-gui:current
      resource_class: windows.medium
      shell: bash.exe
