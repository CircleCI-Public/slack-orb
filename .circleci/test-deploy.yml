version: 2.1
orbs:
  orb-tools: circleci/orb-tools@12.0
  go: circleci/go@1.9
  slack: {}

filters: &filters
  tags:
    only: /.*/

release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

jobs:
  unit-tests:
    executor:
      name: go/default
      tag: "1.21.0"
    steps:
      - checkout
      - go/load-cache
      - go/mod-download
      - go/save-cache
      - go/test:
          covermode: atomic
          failfast: true
          race: true
          verbose: true
  integration-test-templates:
    executor:
      name: go/default
      tag: "1.21.0"
    steps:
      - checkout
      - run:
          name: Build Latest
          command: |
            go build -o ./.circleci/orbs/circleci/slack/Linux/x86_64/slack-orb-go ./src/scripts/main.go
          when: always      
      - slack/notify:
          debug: true
          step_name: "Custom template with group mention"
          event: always
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Current Job: $CIRCLE_JOB"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "This test will @ a normal user, a user ID, and normal group name: <@U8C9ETTUG>, @orbs, @gabriel"
                  }
                }
              ]
            }
      - run:
          name: Verify SLACK_JOB_STATUS is written
          command: |
            grep "pass" /tmp/SLACK_JOB_STATUS
          when: always
      - slack/notify:
          debug: true
          step_name: "Fail template with mentions"
          template: basic_fail_1
          mentions: "@orbs"
          event: always
      - slack/notify:
          debug: true
          step_name: "Success template with mentions"
          template: basic_success_1
          event: always
      - slack/notify:
          debug: true
          step_name: "Success tagged template"
          template: success_tagged_deploy_1
          event: always
      - slack/notify:
          debug: true
          step_name: "Basic on hold template"
          template: basic_on_hold_1
          event: always
      - slack/notify:
          debug: true
          step_name: "Custom template with env var in the message"
          event: always
          custom: >
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Sample link using environment variable in markdown <${CIRCLE_BUILD_URL}|LINK >"
                  }
                }
              ]
            }
      - run:
          name: Dynamically populate the mention and export the template as an environment variable
          command: |
            echo 'export COMMIT_MESSAGE="This text comes from an environment variable"' >> $BASH_ENV
            echo 'export SLACK_PARAM_MENTIONS="$COMMIT_MESSAGE"' >> $BASH_ENV
            echo 'export MY_ORB_TEMPLATE=$(cat src/message_templates/basic_success_1.json)' >> $BASH_ENV
          when: always
      - slack/notify:
          debug: true
          step_name: "Dynamic template with environment variable"
          event: always
          template: MY_ORB_TEMPLATE
      - slack/notify:
          debug: true
          step_name: "Notify without template parameter"
      # Should run for every branch but master
      - slack/notify:
          debug: true
          step_name: "Invert match set to true on 'master' branch pattern"
          branch_pattern: "master"
          invert_match: true
          event: always
      - run:
          name: Export variable with a multiline string
          command: |
            printf '%s\n' 'export MULTILINE_STRING=$(printf "%s\\n" "Line 1." "Line 2." "Line 3.")' >> "$BASH_ENV"
          when: always
      - slack/notify:
          debug: true
          step_name: "Notify with multiline string"
          event: always
          custom: >
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "This message should show over multiple lines: $MULTILINE_STRING"
                  }
                }
              ]
            }
      - run:
          name: Export variable with double quotes
          command: |
            printf '%s\n' 'export DOUBLE_QUOTES_STRING=$(printf "%s\\n" "Hello There! My name is \"Potato\"")' >> "$BASH_ENV"
          when: always
      - slack/notify:
          debug: true
          step_name: "Notify with double-quoted string"
          event: always
          custom: >
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "This message should show a string between double quotes: $DOUBLE_QUOTES_STRING"
                  }
                }
              ]
            }
      - run:
          name: Export variable with backslashes
          command: |
            printf '%s\n' 'export BACKSLASHES_STRING="This is how a \ looks like"' >> "$BASH_ENV"
          when: always
      - slack/notify:
          debug: true
          step_name: "Notify with backslashes string"
          event: always
          custom: >
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "This message should show a backslash: $BACKSLASHES_STRING"
                  }
                }
              ]
            }
      - run:
          name: Export value to file
          command: |
            printf '%s\n' "Hello There!" > /tmp/msg
          when: always
      - slack/notify:
          debug: true
          step_name: "Notify with custom message coming from sub-shell and template variable"
          event: always
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Current Job: $CIRCLE_JOB"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "$(cat /tmp/msg)"
                  }
                }
              ]
            }
      - slack/notify:
          debug: true
          step_name: "Notify with only custom message coming from sub-shell"
          event: always
          custom: |
            {
              "type": "mrkdwn",
              "text": "$(cat /tmp/msg)"
            }
  build-release:
    executor:
      name: go/default
      tag: "1.21.0"
    steps:
      - go/install-goreleaser
      - checkout
      - go/goreleaser-release:
          publish-release: true
          validate-yaml: true
          project-path: "$HOME/project/src/scripts"
          github-token: GHI_TOKEN
workflows:
  test-deploy:
    jobs:
      - unit-tests:
          filters: *filters
      - integration-test-templates:
          context: SLACK_NOTIFICATIONS_TEST
          filters: *filters
          requires: [unit-tests]
      - orb-tools/pack:
          filters: *release-filters
      - build-release:
          requires: [integration-test-templates, orb-tools/pack]
          context: orb-publisher
          filters: *release-filters
      - orb-tools/publish:
          orb_name: circleci/slack
          vcs_type: << pipeline.project.type >>
          pub_type: dev
          requires: [build-release]
          context: orb-publisher
          filters: *release-filters
executors:
  cimg:
    docker:
      - image: cimg/base:current
  mac:
    macos:
      xcode: 14.0.0
  alpine:
    # This image contains both CURL and JQ
    docker:
      - image: dwdraju/alpine-curl-jq
  windows:
    machine:
      image: windows-server-2019-vs2019:current
      resource_class: windows.medium
      shell: bash.exe
